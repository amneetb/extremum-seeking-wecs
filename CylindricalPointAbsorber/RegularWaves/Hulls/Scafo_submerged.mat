
%% Point Absorber Simulink Model - simone


%% INTRO
clear all
close all
clc

%% FUNCTIONS FOLDER

addpath([cd,'\Different hulls Hydrodynamic'])% This folder contains all the hulls from th budal analysis
addpath([cd,'\Functions\']) %It contains functions like the Regular wave Analysis
addpath([cd,'\MODELSandPARAMETERS\'])% It contains the simulink models 
addpath([cd,'\Hulls\'])% It contains all the hulls

% Parameters
load('sfera.mat')% It contains hydrodynamic data for the body coming from the LIS. File


par.hull = hull;

%% Model Name and simulink parameters

par.sym.TStart = 0;
par.sym.Outputdt = 0.01;
par.sym.Ttot = 600;      % Time simulation (s)
par.sym.TStop = par.sym.Ttot;
par.sym.max_dt = 0.1;
par.sym.solver = 'ode45'; %Numerical method that we will use in order to solve the differential equations
par.sym.cut = ( 0.1 * par.sym.Ttot/par.sym.Outputdt);  % Cut for time histories
model_name = 'Point_Absorber_model.slx';%Select which simulink model do you prefer PA_MODEL_3DOF_2015   Point_Absorber_model



par.hull.BetaPitch = 0;% Non linear damping coefficient


%% Analysis

% Wave

par.T = 1/0.9428; %Period of the wave (s)
par.H = 0.03; %Height of the wave (m)
dir = 1; % direction
par.ramp_cycle = 5; % Transient period of the dynamics in the beginning of the simulation
[WAVE] = FUNC_RegularWaveAnalysis_3DOF(par,dir);% It produces data about the wave(excitation forces)
par.WAVE = WAVE;

%Hydrostatic Forces
Diam = 0.16; %Diameter of the sphere
R = Diam/2; %Radius of the sphere
g = 9.81;  % m/s^2 accelaration of gravity
volume = 4/3*pi*(Diam/2)^3; %volume of the sphere in m^3

%Drag Forces
density_p = 1025;
Cdx = 0.42;
Cdz = 0.42;
Ax = pi*(Diam/2)^2/2;
Az = pi*(Diam/2)^2;

%Temporary mass per testing
%Attention! Check the model what mass it uses
m =1.97;%(density_p*volume*g - Lamvda2*K_stiffness)/g;
inertia = 2/5*m*(Diam/2)^2; % Inertia 

% Moorings of the point Absorber

weight = 0;% The total weight of the mooring line kg

% If the mooring line has a linear behaviour use this stiffness value
K_stiffness = 170;% Stiffness of the mooring line N/m
Smax = 0.67*0.08;
%x1 = (density_p*g*volume - m*g)/K_stiffness;
Sinit = (density_p*g*volume - m*g)/K_stiffness;
Initial_L = 0.28 ;% Initial length of the mooring line
Anchor = [0 ;0 ;-30]; %Coordinates of the anchor
C = [0 ;0 ; 30-Initial_L]; % Coordinates of the mooring point



%% PTO Damping

Bpto = 0;

%% Flags
Pto_flag = 1;%Put 1 if you want the force of PTO
drag_flag = 1;%Put 1 if you want the Drag forces
viscous_flag = 0;%Put 1 if you want the viscous flag
Drift_flag = 0;%Put 1 if you want the Drift flag
Hydrostatic_flag = 0; % If the body is submerged put 0(Always with moorings)
mooring_flag = 1 ;% Without moorings put 0/With moorings put 1
wave_flag = 1 ;% If you dont want waves put 0
pitch_flag = 1;


temp_mass = zeros(6); % Create the mass matrix
temp_mass(1,1) = m;
temp_mass(2,2) = m;
temp_mass(3,3) = m;
temp_mass(4,4) = inertia;
temp_mass(5,5) = inertia;
temp_mass(6,6) = inertia;
sim(model_name)

%% STIFFNESS CONTROL

% L2 = (density_p*volume*g - m*g)/K_stiffness; % Calculate the initial mooring elongation
% %num = fix(numel(HEAVE(:,1))/3);
 x = HEAVE(:,1)-mean(HEAVE(:,1));%([num:end],1); %Here we take the half vector
% time2 = transpose(TIME);%(1:numel(x)); % Here we cut also the time series
% C = 0;
% flag = 0;
% [Tn,Yn] = Freq_Analysis(time2,x,C,flag);
% Yn = Yn/2;
% if Yn > L2 
%    disp('The WEC DOES NOT FUNCTION PROPERLY'); 
% else
%     disp('The WEC FUNCTIONS PROPERLY');
%   
% end



%% PLOTS

figure()
plot(TIME,PITCH(:,1)*180/pi)
xlabel('Time (s)'),ylabel('Pitch (deg)'), grid minor
figure()
plot(TIME,HEAVE(:,1))
xlabel('Time (s)'),ylabel('Heave (m)'), grid minor

figure()
plot(TIME,SURGE(:,1))
xlabel('Time (s)'),ylabel('Surge (m)'), grid minor
figure()
plot(TIME,TENSION(:,1))
xlabel('Time (s)'),ylabel('Tension (N)'), grid minor
figure()
plot(TIME,POWER)
xlabel('Time (s)'),ylabel('Power'), grid minor

figure()
plot(TIME(round(0.1*numel(x):end)),x(round(0.1*numel(x):end)))
xlabel('Time (s)'),ylabel('Clean Heave'), grid minor

mean_power = mean(POWER);

figure()
plot(TIME,SURGE(:,2))
xlabel('Time (s)'),ylabel('Velocity Surge (m/s)'), grid minor

figure()
plot(TIME,PITCH(:,2)*180/pi)
xlabel('Time (s)'),ylabel('Pitch Velocity (deg/s)'), grid minor

figure()
plot(TIME,HEAVE(:,2))
xlabel('Time (s)'),ylabel('Heave Velocity (m/s)'), grid minor

%% Results

disp('-------------------------------------------------------------------')

%PITCH
Res.delta_rms = rms(PITCH(par.sym.cut:end,1)*180/pi);
disp(['Delta rms : ',num2str(Res.delta_rms),' deg'])
Res.delta_max = max(abs(PITCH(par.sym.cut:end,1)*180/pi));
disp(['Delta max : ',num2str(Res.delta_max),' deg'])

Res.deltad_rms = rms(PITCH(par.sym.cut:end,2)*30/pi);
disp(['Delta_dot rms : ',num2str(Res.deltad_rms),' rpm'])
Res.deltad_max = max(abs(PITCH(par.sym.cut:end,2)*30/pi));
disp(['Delta_dot max : ',num2str(Res.deltad_max),' rpm'])

disp('-------------------------------------------------------------------')

%HEAVE
Res.heave_rms = rms(x(par.sym.cut:end,1));
disp(['heave rms : ',num2str(Res.heave_rms),' m'])
Res.heave_max = max(abs(x(par.sym.cut:end,1)));
disp(['heave max : ',num2str(Res.heave_max),' m'])

Res.heaved_rms = rms(HEAVE(par.sym.cut:end,2));
disp(['heave_dot rms : ',num2str(Res.heaved_rms),' m'])
Res.heaved_max = max(abs(HEAVE(par.sym.cut:end,2)));
disp(['heave_dot max : ',num2str(Res.heaved_max),' m'])

disp('-------------------------------------------------------------------')
%SURGE
Res.surge_rms = rms(SURGE(par.sym.cut:end,1));
disp(['surge rms : ',num2str(Res.surge_rms),' m'])
Res.surge_max = max(abs(SURGE(par.sym.cut:end,1)));
disp(['surge max : ',num2str(Res.surge_max),' m'])

Res.surged_rms = rms(SURGE(par.sym.cut:end,2));
disp(['surge_dot rms : ',num2str(Res.surged_rms),' m'])
Res.surged_max = max(abs(SURGE(par.sym.cut:end,2)));
disp(['surge_dot max : ',num2str(Res.surged_max),' m'])

disp('-------------------------------------------------------------------')



% Froude Frylov Forces 

figure()
plot(par.hull.WAVE.prop.T_vec,squeeze(abs(par.hull.WAVE.forces{3,1}.f(:,1))))
grid on
xlabel('Period')
ylabel('Forces')


%% Damping 

figure()
plot(par.hull.WAVE.prop.T_vec,squeeze(par.hull.FDA.hydrodynamic.B(3,3,:)))
grid on 
xlabel('Period')
ylabel('Forces')


forza = squeeze(abs(par.hull.WAVE.forces{3,1}.f(:,1)));

%% PTO Forces

for ii = 1:numel(PTO_Forces(:,1))
    force_tot(ii) = sqrt(PTO_Forces(ii,1)^2 + PTO_Forces(ii,3)^2); 
end

figure()
plot(TIME,force_tot)
grid on
xlabel('Time (s)') 
ylabel('PTO Forces')


%% Save all the data in a structure

sim_data.time = TIME;
sim_data.surge = SURGE(:,1);
sim_data.heave = HEAVE(:,1);
sim_data.pitch = PITCH(:,1)*180/pi;
sim_data.tension = TENSION(:,1);
sim_data.ptoforce = force_tot;
sim_data.power = POWER;